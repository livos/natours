/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

*,
*::after,
*::before {
    margin: 0;
    padding: 0;
    box-sizing: inherit;
}

html {
    font-size: 62.5%;
}

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    line-height: 1.7; /* Means the line-height is 1.7 heigher than the line-height we would have without this */
    color: #777;
    padding: 3rem;

    box-sizing: border-box;
}

.header {
    height: 95vh; /* 95% of the viewport height */
    background-image: linear-gradient(
            to right,
            rgba($color-primary-light, 0.8),
            rgba($color-primary-dark,0.8)),
        url('../img/hero.jpg');
    background-size: cover; /* whatever the width of the viewport or the element is, it will always try to fit the element inside of the box, resizing it */
    background-position: top; /* when resizing the top will not be cropped, only the bottom */
    position: relative; /* we put this relative for the logo-box position take this element as reference */

    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%) /* crop part of the image */
}

.header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
}

.header__logo {
    height: 3.5rem;
}

.header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;

    margin-bottom: 6rem;
}

.heading-primary--main {
    display: block; /* we use this because this element is a span and we want to show two consecutive spans on a different line*/
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;

    animation: moveInLeft 1s ease-out;
}

.heading-primary--sub {
    display: block; /* we use this because this element is a span and we want to show two consecutive spans on a different line*/
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft { /* moveInLeft is just a free name we give to the animation */
    0% { /* we put here what we want to happen when the animation progress is at 0% */
        opacity: 0; 
        transform: translateX(-10rem);
    }

    80% {
        transform: translateX(1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInRight { /* moveInLeft is just a free name we give to the animation */
    0% { /* we put here what we want to happen when the animation progress is at 0% */
        opacity: 0; 
        transform: translateX(10rem);
    }

    80% {
        transform: translateX(-1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInBottom { /* moveInLeft is just a free name we give to the animation */
    0% { /* we put here what we want to happen when the animation progress is at 0% */
        opacity: 0; 
        transform: translateY(3rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

.btn:link,
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem; /* here the first number is for top and bottom and the second for left and right */
    display: inline-block;
    border-radius: 10rem;
    transition: all .2s;
    position:relative; /* we put this to relative for the button pseudo element can be postionned exactly at the same position of the button. Since it the first relative element in pseudo button element ::after then it will be taken as reference*/
    font-size: 1.6rem;
}

.btn:hover {
    transform: translateY(-3px); /* translate is always related to the initial position of the element */
    box-shadow: 0 1rem 2rem rgba(0,0,0,.2); /* offset-x | offset-y | blur-radius | color */
}

.btn:active {
    transform: translate(-1px); /* translate is always related to the initial position of the element */
    box-shadow: 0 .5rem 1rem rgba(0,0,0,.2);
}

.btn--white {
    background-color: #fff;
    color: #777; /* text color */
}

.btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute; /* used to get the first parent positionned to relative (here the button) as a reference for positionning*/
    top: 0;
    left: 0;
    z-index: -1; /* used to put the pseudo element behing the button*/
    transition: all .4s;
}

.btn--white::after {
    background-color: #fff;
}

/* this is a pseudo element that is created only when a button is hovered*/
.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity:0;
}

.btn--animated {
    animation: moveInBottom .5s ease-out .75s; /* duration |Â timing function | animation delay */
    animation-fill-mode: backwards; /* means the 0% animation state will be applied before the animation starts*/

}